version: '2.1'
services:

    postgres:
        image: postgres:11
        networks:
            - development
        ports:
            - ${PG_PORT-5432}:5432
        environment:
            POSTGRES_USER: ${PG_USERNAME:-postgres}
            POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
            POSTGRES_DB: ${PG_DATABASE:-postgres}
        volumes:
            - ${HUMBLE_DATA}/pg:/var/lib/postgresql/data
            - ${HUMBLE_BACKUP}:/backup
        restart: always

    api:
        build:
            context: ./services/webapp
            dockerfile: Dockerfile.dev
        depends_on:
            - postgres
        networks:
            - development
        ports:
            - ${SERVER_PORT:-8080}:8080
        environment:
            NODE_ENV: ${NODE_ENV:-development}
            BABEL_ENV: ${BABEL_ENV:-node}
            LOG_LEVEL: ${LOG_LEVEL:-verbose}
            APP_NAME: ${APP_NAME:-TrackerApp}
            APP_ID: ${APP_ID:-trkr}
            PG_HOST: postgres
            PG_PORT: 5432
            PG_DATABASE: ${PG_DATABASE:-postgres}
            PG_USERNAME: ${PG_USERNAME:-postgres}
            PG_PASSWORD: ${PG_PASSWORD:-postgres}
            PG_MAX_CONN_ATTEMPTS: ${PG_MAX_CONN_ATTEMPTS:-10}
            PG_CONN_ATTEMPTS_DELAY: ${PG_CONN_ATTEMPTS_DELAY:-500}
            SERVER_PORT: ${SERVER_PORT:-8080}
            BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-5}
            JWT_SECRET: ${JWT_SECRET:-12345}
            JWT_DURATION: ${JWT_DURATION:-30d}
            LOGIN_DURATION: ${LOGIN_DURATION:-30d}
            GRAPHQL_MOUNT_POINT: ${GRAPHQL_MOUNT_POINT:-/api}
            GRAPHQL_TEST_TOKEN: ${GRAPHQL_TEST_TOKEN:-12345}
            REACT_SSR: ${REACT_SSR:-yes}
            REACT_SSR_ENABLED: ${REACT_SSR_ENABLED:-yes}
            REACT_SSR_USE_CACHE: ${REACT_SSR_USE_CACHE:-no}
        volumes:
            - ./services/webapp/ssr:/usr/src/app/ssr
            - ./services/webapp/src:/usr/src/app/src
            - ./services/webapp/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start:dev:api" ]

    app:
        build:
            context: ./services/webapp
            dockerfile: Dockerfile.dev
        networks:
            - development
        ports:
            - ${FRONTEND_PORT:-3000}:3000
        volumes:
            - ./services/webapp/src:/usr/src/app/src
            - ./services/webapp/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "start" ]

    build:
        build:
            context: ./services/webapp
            dockerfile: Dockerfile.dev
        volumes:
            - ./services/webapp/src:/usr/src/app/src
            - ./services/webapp/build:/usr/src/app/build
        working_dir: /usr/src/app
        entrypoint: [ "yarn", "build" ]

networks:
    development:
